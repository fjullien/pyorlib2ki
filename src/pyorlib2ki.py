#!/usr/bin/env python3

# SPDX-FileCopyrightText: 2021 Franck Jullien <franck.jullien@gmail.com>
# SPDX-License-Identifier: BSD-3-Clause

import xml.etree.ElementTree as ET
import sys
import getopt
import os

from classes import *
from datetime import date

version = 'v1.1'

def parse_orcad_file(file_name, verbose):

    tree = ET.parse(file_name)
    root = tree.getroot()

    packages = []

    for package in root.iter('Package'):

        error = False

        defn = package.find('Defn').attrib
        symbol = Symbol(defn['name'], defn['refdesPrefix'], defn['pcbFootprint'], defn['isHomogeneous'])

        if (verbose):
            print('[CONV] {}'.format(defn['name']))

        for lib in package.iter('LibPart'):
            libpart = LibPart(lib)
            normalview = lib.find('NormalView')

            if normalview.find('IsPinNumbersVisible').find('Defn').attrib['val'] == '1':
                libpart.pinNumbersVisible = True

            libpart.value = normalview.find('PartValue').find('Defn').attrib['name']

            libpart.bbox = normalview.find('SymbolBBox').find('Defn').attrib.copy()

            if normalview.find('IsPinNamesVisible').find('Defn').attrib['val'] == '1':
                libpart.pinNamesVisible = True

            for prop in normalview.findall('SymbolDisplayProp'):
                libpart.displayProp.append(SymbolDisplayProp(prop))

            if not libpart.displayProp:
                if (verbose):
                    print('[WARN] {} has no refdes'.format(defn['name']))
                error = True

            for prop in normalview.findall('SymbolUserProp'):
                libpart.userProp.append(prop.find('Defn').attrib.copy())

            for pin in normalview.findall('SymbolPinScalar'):
                libpart.pins.append(SymbolPinScalar(pin))

            for r in normalview.findall('Rect'):
                libpart.rect.append(Rectangle(r))

            for l in normalview.findall('Line'):
                libpart.line.append(Line(l))

            for a in normalview.findall('Arc'):
                libpart.arc.append(Arc(a))

            for e in normalview.findall('Ellipse'):
                libpart.ellipse.append(Ellipse(e))

            for p in normalview.findall('Polygon'):
                libpart.polygon.append(Polygon(p))

            for p in normalview.findall('Polyline'):
                libpart.polygon.append(Polygon(p))

            for t in normalview.findall('CommentText'):
                libpart.text.append(Text(t))

            for phy in lib.iter('PhysicalPart'):
                phypart = PhyPart(phy)
                for pin in phy.findall('PinNumber'):
                    number = pin.find('Defn').attrib['number']
                    position = pin.find('Defn').attrib['position']
                    phypart.pins[position] = number

                libpart.phypart.append(phypart)

            if error == False:
                symbol.libpart.append(libpart)
                packages.append(symbol)
            else:
                print("[WARN] Could't convert {}".format(defn['name']))

    return packages

def convert_file(input_file, output_file, verbose, text_size, pin_nb_sz, pin_name_sz):

    lib = parse_orcad_file(input_file, verbose)

    with open(output_file,'w', encoding='utf-8') as f:
        f.write('# **** This file is automatically generated by pyorlib2ki\n');
        f.write('# **** https://github.com/fjullien/pyorlib2ki\n')
        f.write('\n')
        f.write('(kicad_symbol_lib (version ' + '20210101' +') (generator pyorlib2ki)\n')

        for p in lib:

            pin_numbers_visible = '(pin_numbers hide)'
            pin_names_visible = '(pin_names hide)'
            if p.libpart[0].pinNamesVisible is True:
                pin_names_visible = ''
            if p.libpart[0].pinNumbersVisible is True:
                pin_numbers_visible = ''

            lib_name = os.path.basename(os.path.splitext(output_file)[0])

            f.write('  (symbol "{}:{}" {} {} (in_bom yes) (on_board yes)\n'.format(lib_name, p.name, pin_names_visible, pin_numbers_visible))

            if p.homogeneous is True:
                unit = 0
            else:
                unit = 1

            p.print_properties(f, text_size);

            for libpart in p.libpart:

                f.write('    (symbol "{}_{}_1"\n'.format(p.name, unit))

                for l in libpart.line:
                    l.draw(f)

                for r in libpart.rect:
                    r.draw(f)

                for a in libpart.arc:
                    a.draw(f)

                for t in libpart.text:
                    t.draw(f)

                for poly in libpart.polygon:
                    poly.draw(f)

                for e in libpart.ellipse:
                    e.draw(f)

                if p.homogeneous is True:
                    f.write('    )\n')

                unit += 1

                for phy in libpart.phypart:

                    if p.homogeneous is True:
                        f.write('    (symbol "{}_{}_1"\n'.format(p.name, unit))

                    for pin in libpart.pins:
                        pin.draw(f, phy, pin_nb_sz, pin_name_sz)

                    f.write('    )\n')

                    if p.homogeneous is True:
                        unit += 1

            f.write('  )\n')

        f.write(')\n')

def print_usage():
    print('pyorlib2ki version {}'.format(version))
    print('Usage: pyorlib2ki [-t sz] [-p sz] [-n sz] [-v] -i inputfile [-o outputfile]')
    print('')
    print('    -h   print this help')
    print('    -i   specify input file')
    print('    -o   specify output file')
    print('    -t   configure text size (default 1.27mm)')
    print('    -p   configure pin number text size (default 1.5mm)')
    print('    -n   configure pin name text size (default 1.7mm)')
    print('')

def main(argv):

    input_file_name = ''
    output_file_name = ''
    verbose = False
    text_size = 1.27
    pin_name_sz = 1.7
    pin_nb_sz = 1.5

    try:
        opts, args = getopt.getopt(argv, "i:o:hvt:p:n:")
    except getopt.GetoptError:
        print_usage()
        sys.exit(2)

    for opt, arg in opts:
            if opt in ('-h'):
                print_usage()
                sys.exit()
            elif opt in ('-o'):
                output_file_name = arg
            elif opt in ('-i'):
                input_file_name = arg
            elif opt in ('-v'):
                verbose = True
            elif opt in ('-t'):
                text_size = float(arg)
            elif opt in ('-p'):
                pin_nb_sz = float(arg)
            elif opt in ('-n'):
                pin_name_sz = float(arg)

    if (input_file_name == ''):
            print_usage()
            sys.exit()

    if (output_file_name == ''):
            output_file_name = os.path.splitext(input_file_name)[0] + '.kicad_sym'
            print(output_file_name)

    convert_file(input_file_name, output_file_name, verbose, text_size, pin_nb_sz, pin_name_sz)

if __name__ == "__main__":
    main(sys.argv[1:])
